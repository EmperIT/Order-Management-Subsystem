// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.6.1
//   protoc               v3.20.3
// source: proto/shift.proto

/* eslint-disable */
import { GrpcMethod, GrpcStreamMethod } from "@nestjs/microservices";
import { Observable } from "rxjs";

export const protobufPackage = "shift";

export interface CreateShiftDto {
  shiftName: string;
  startTime: string;
  endTime: string;
  secretKey: string;
  isActive: boolean;
  totalRevenue: number;
  orderCount: number;
}

export interface UpdateShiftDto {
  id: string;
  shiftName: string;
  startTime: string;
  endTime: string;
  secretKey: string;
  isActive: boolean;
  totalRevenue: number;
  orderCount: number;
}

export interface FindOneShiftDto {
  id: string;
}

export interface FindShiftsByTimeRangeDto {
  startTime: string;
  endTime: string;
}

export interface ValidateSecretKeyDto {
  currentTime: string;
  secretKey: string;
}

export interface ValidateSecretKeyResponse {
  isValid: boolean;
}

export interface Shift {
  id: string;
  shiftName: string;
  startTime: string;
  endTime: string;
  secretKey: string;
  isActive: boolean;
  totalRevenue: number;
  orderCount: number;
}

export interface Shifts {
  shifts: Shift[];
  total: number;
}

export const SHIFT_PACKAGE_NAME = "shift";

export interface ShiftServiceClient {
  createShift(request: CreateShiftDto): Observable<Shift>;

  findShiftsByTimeRange(request: FindShiftsByTimeRangeDto): Observable<Shifts>;

  findOneShift(request: FindOneShiftDto): Observable<Shift>;

  updateShift(request: UpdateShiftDto): Observable<Shift>;

  validateSecretKey(request: ValidateSecretKeyDto): Observable<ValidateSecretKeyResponse>;
}

export interface ShiftServiceController {
  createShift(request: CreateShiftDto): Promise<Shift> | Observable<Shift> | Shift;

  findShiftsByTimeRange(request: FindShiftsByTimeRangeDto): Promise<Shifts> | Observable<Shifts> | Shifts;

  findOneShift(request: FindOneShiftDto): Promise<Shift> | Observable<Shift> | Shift;

  updateShift(request: UpdateShiftDto): Promise<Shift> | Observable<Shift> | Shift;

  validateSecretKey(
    request: ValidateSecretKeyDto,
  ): Promise<ValidateSecretKeyResponse> | Observable<ValidateSecretKeyResponse> | ValidateSecretKeyResponse;
}

export function ShiftServiceControllerMethods() {
  return function (constructor: Function) {
    const grpcMethods: string[] = [
      "createShift",
      "findShiftsByTimeRange",
      "findOneShift",
      "updateShift",
      "validateSecretKey",
    ];
    for (const method of grpcMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcMethod("ShiftService", method)(constructor.prototype[method], method, descriptor);
    }
    const grpcStreamMethods: string[] = [];
    for (const method of grpcStreamMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcStreamMethod("ShiftService", method)(constructor.prototype[method], method, descriptor);
    }
  };
}

export const SHIFT_SERVICE_NAME = "ShiftService";
