// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.6.1
//   protoc               v3.20.3
// source: proto/order.proto

/* eslint-disable */
import { GrpcMethod, GrpcStreamMethod } from "@nestjs/microservices";
import { Observable } from "rxjs";

export const protobufPackage = "order";

/** --- ORDER DTOs --- */
export interface CreateOrderDto {
  tableId: string;
  total: number;
  /** in_progress | paid */
  status: string;
}

export interface UpdateOrderDto {
  id: string;
  tableId: string;
  total: number;
  /** in_progress | paid */
  status: string;
}

export interface FindAllOrderItemsByOrderIdDto {
  orderId: string;
}

export interface FindOneOrderDto {
  id: string;
}

export interface Order {
  id: string;
  tableId: string;
  items: OrderItem[];
  total: number;
  status: string;
  createdAt: string;
  updatedAt: string;
}

export interface Orders {
  orders: Order[];
  total: number;
}

/** --- ORDER ITEM DTOs --- */
export interface CreateOrderItemDto {
  orderId: string;
  dishId: string;
  quantity: number;
  note: string;
  /** in_progress | finalized */
  status: string;
}

export interface UpdateOrderItemDto {
  id: string;
  orderId: string;
  dishId: string;
  quantity: number;
  note: string;
  status: string;
}

export interface FindOneOrderItemDto {
  id: string;
}

export interface OrderItem {
  id: string;
  orderId: string;
  dishId: string;
  dishName: string;
  price: number;
  quantity: number;
  note: string;
  status: string;
  createdAt: string;
  updatedAt: string;
}

export interface OrderItems {
  items: OrderItem[];
  total: number;
}

/** --- COMMON --- */
export interface PaginationDto {
  page: number;
  limit: number;
}

export const ORDER_PACKAGE_NAME = "order";

export interface OrderServiceClient {
  /** Order */

  createOrder(request: CreateOrderDto): Observable<Order>;

  findAllOrders(request: PaginationDto): Observable<Orders>;

  findOneOrder(request: FindOneOrderDto): Observable<Order>;

  updateOrder(request: UpdateOrderDto): Observable<Order>;

  /** OrderItem */

  createOrderItem(request: CreateOrderItemDto): Observable<OrderItem>;

  findAllOrderItemsByOrderId(request: FindAllOrderItemsByOrderIdDto): Observable<OrderItems>;

  findOneOrderItem(request: FindOneOrderItemDto): Observable<OrderItem>;

  updateOrderItem(request: UpdateOrderItemDto): Observable<OrderItem>;

  removeOrderItem(request: FindOneOrderItemDto): Observable<OrderItem>;
}

export interface OrderServiceController {
  /** Order */

  createOrder(request: CreateOrderDto): Promise<Order> | Observable<Order> | Order;

  findAllOrders(request: PaginationDto): Promise<Orders> | Observable<Orders> | Orders;

  findOneOrder(request: FindOneOrderDto): Promise<Order> | Observable<Order> | Order;

  updateOrder(request: UpdateOrderDto): Promise<Order> | Observable<Order> | Order;

  /** OrderItem */

  createOrderItem(request: CreateOrderItemDto): Promise<OrderItem> | Observable<OrderItem> | OrderItem;

  findAllOrderItemsByOrderId(
    request: FindAllOrderItemsByOrderIdDto,
  ): Promise<OrderItems> | Observable<OrderItems> | OrderItems;

  findOneOrderItem(request: FindOneOrderItemDto): Promise<OrderItem> | Observable<OrderItem> | OrderItem;

  updateOrderItem(request: UpdateOrderItemDto): Promise<OrderItem> | Observable<OrderItem> | OrderItem;

  removeOrderItem(request: FindOneOrderItemDto): Promise<OrderItem> | Observable<OrderItem> | OrderItem;
}

export function OrderServiceControllerMethods() {
  return function (constructor: Function) {
    const grpcMethods: string[] = [
      "createOrder",
      "findAllOrders",
      "findOneOrder",
      "updateOrder",
      "createOrderItem",
      "findAllOrderItemsByOrderId",
      "findOneOrderItem",
      "updateOrderItem",
      "removeOrderItem",
    ];
    for (const method of grpcMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcMethod("OrderService", method)(constructor.prototype[method], method, descriptor);
    }
    const grpcStreamMethods: string[] = [];
    for (const method of grpcStreamMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcStreamMethod("OrderService", method)(constructor.prototype[method], method, descriptor);
    }
  };
}

export const ORDER_SERVICE_NAME = "OrderService";
